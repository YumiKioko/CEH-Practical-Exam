import os
import logging
from modules import dns_resolver, port_scanner, web_fingerprinter, dirbuster
from modules import masscan_scan, nmap_scan, service_enum
from modules import graphql_finder, rest_api_hunter, openapi_discover
from modules import vuln_scanner, exploit_attempts, report_generator

# Configura√ß√£o de Logging
logging.basicConfig(filename='pentest_automation.log', level=logging.DEBUG,
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Fun√ß√£o para executar Reconhecimento Web
def run_web_recon(target):
    logging.info(f"Iniciando Reconhecimento Web para {target}")
    print(f"\nüåê Iniciando Reconhecimento Web para {target}...\n")
    reports_dir = f"reports/{target}"
    os.makedirs(reports_dir, exist_ok=True)

    # Executando recon de Web
    web_fingerprinter.run(target, f"{reports_dir}/web_fingerprint.txt")
    dirbuster.run(target, f"{reports_dir}/dirbuster_scan.txt")
    vuln_scanner.run_vuln_scanner(target)  # Rodando vulnerabilidades
    exploit_attempts.run(target, f"{reports_dir}/vuln_scan.txt")  # Tentando explora√ß√£o de vulnerabilidades

    # Gerando relat√≥rio final em HTML
    report_generator.generate_html_report(target, reports_dir)

    logging.info(f"Reconhecimento Web finalizado para {target}")
    print(f"\n‚úÖ Reconhecimento Web finalizado para {target}!")

# Fun√ß√£o para executar Reconhecimento de Rede
def run_network_recon(target):
    logging.info(f"Iniciando Reconhecimento de Rede para {target}")
    print(f"\nüñß Iniciando Reconhecimento de Rede para {target}...\n")
    reports_dir = f"reports/{target}"
    os.makedirs(reports_dir, exist_ok=True)

    # Executando recon de Rede
    masscan_scan.run(target, f"{reports_dir}/masscan.txt")
    nmap_scan.run(target, f"{reports_dir}/nmap.txt")
    service_enum.run(target, f"{reports_dir}/nmap.txt", f"{reports_dir}/services_enum.txt")
    vuln_scanner.run_vuln_scanner(target)  # Rodando vulnerabilidades
    exploit_attempts.run(target, f"{reports_dir}/vuln_scan.txt")  # Tentando explora√ß√£o de vulnerabilidades

    # Gerando relat√≥rio final em HTML
    report_generator.generate_html_report(target, reports_dir)

    logging.info(f"Reconhecimento de Rede finalizado para {target}")
    print(f"\n‚úÖ Reconhecimento de Rede finalizado para {target}!")

# Fun√ß√£o para executar Reconhecimento de API
def run_api_recon(target):
    logging.info(f"Iniciando Reconhecimento de API para {target}")
    print(f"\nüì° Iniciando Reconhecimento de API para {target}...\n")
    reports_dir = f"reports/{target}"
    os.makedirs(reports_dir, exist_ok=True)

    # Executando recon de API
    graphql_finder.run(target, f"{reports_dir}/graphql_scan.txt")
    rest_api_hunter.run(target, f"{reports_dir}/rest_api_scan.txt")
    openapi_discover.run(target, f"{reports_dir}/openapi_scan.txt")
    vuln_scanner.run_vuln_scanner(target)  # Rodando vulnerabilidades
    exploit_attempts.run(target, f"{reports_dir}/vuln_scan.txt")  # Tentando explora√ß√£o de vulnerabilidades

    # Gerando relat√≥rio final em HTML
    report_generator.generate_html_report(target, reports_dir)

    logging.info(f"Reconhecimento de API finalizado para {target}")
    print(f"\n‚úÖ Reconhecimento de API finalizado para {target}!")

# Fun√ß√£o principal que vai gerenciar os alvos e os tipos de recon
def main():
    # Defina seus alvos para escanear aqui
    targets = ["example.com", "target2.com"]  # Substitua pelos alvos reais

    # Escolha o tipo de scan que deseja fazer para cada alvo
    for target in targets:
        logging.info(f"Iniciando Pentest para: {target}")
        print(f"\nüîç Iniciando Pentest para: {target}\n")

        # Voc√™ pode escolher qual recon fazer para o alvo
        run_web_recon(target)      # Se for alvo web
        # run_network_recon(target)  # Se for alvo de rede
        # run_api_recon(target)     # Se for alvo de API

    logging.info("Pentest finalizado para todos os alvos!")
    print("\nüéâ Pentest finalizado para todos os alvos!")

# Iniciar o script
if __name__ == "__main__":
    main()
